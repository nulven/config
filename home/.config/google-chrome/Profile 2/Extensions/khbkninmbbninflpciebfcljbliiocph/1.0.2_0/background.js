!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([,,function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function u(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}c((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(3),a=n(4),u=n(5),c=new a.CryptoWrapper,s=new u.IdentityStore;function l(e){return r(this,void 0,void 0,(function(){var t,n,r,i,a,u;return o(this,(function(o){switch(o.label){case 0:return[4,c.generateKeyPair()];case 1:return t=o.sent(),n=t.privateKey,r=t.publicKey,[4,c.exportCryptoKey(r)];case 2:return i=o.sent(),u={name:e,publicKey:i},[4,c.exportPrivateCryptoKey(n)];case 3:return u.privateKey=o.sent(),[4,c.generateFingerprint(i)];case 4:return u.fingerprint=o.sent(),a=u,[4,s.set(a.name,a)];case 5:return o.sent(),[2,a]}}))}))}function f(e,t){return r(this,void 0,void 0,(function(){var n,r,i;return o(this,(function(o){switch(o.label){case 0:return[4,s.get(e)];case 1:return n=o.sent(),[4,c.importCryptoPrivateKey(n.privateKey)];case 2:return r=o.sent(),[4,c.sign(r,t)];case 3:return i=o.sent(),[2,{publicKey:n.publicKey,name:n.name,signed:i,hnsRandom:t}]}}))}))}function p(){return r(this,void 0,void 0,(function(){var e;return o(this,(function(t){switch(t.label){case 0:return[4,s.getAll()];case 1:return e=t.sent(),[2,Object.keys(e).map((function(t){return console.log({i:e[t]}),{name:atob(t),fingerprint:e[t].fingerprint}}))]}}))}))}function h(e,t){return r(this,void 0,void 0,(function(){return o(this,(function(n){switch(n.label){case 0:return[4,f(e,t)];case 1:return[2,n.sent()]}}))}))}function d(e){return r(this,void 0,void 0,(function(){var t;return o(this,(function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),[4,s.remove([e])];case 1:return n.sent(),[2,!0];case 2:return t=n.sent(),console.warn(t),[2,!1];case 3:return[2]}}))}))}chrome.browserAction.onClicked.addListener((function(e){var t=chrome.runtime.getURL("/popup/index.html");chrome.tabs.create({url:t})})),chrome.runtime.onMessage.addListener((function(e,t,n){return r(this,void 0,void 0,(function(){var t;return o(this,(function(r){switch(r.label){case 0:return console.log("Command Request",e),e.command!=i.Command.GenerateIdentity.commandName?[3,2]:[4,l(e.name)];case 1:return t=r.sent(),[3,8];case 2:return e.command!=i.Command.FetchAllIdentityName.commandName?[3,4]:[4,p()];case 3:return t=r.sent(),[3,8];case 4:return e.command!=i.Command.SendIdentity.commandName?[3,6]:[4,h(e.name,e.state)];case 5:return t=r.sent(),[3,8];case 6:return e.command!=i.Command.DeleteIdentity.commandName?[3,8]:[4,d(e.name)];case 7:t=r.sent(),r.label=8;case 8:return console.log(e.command+" Response",t),n(t),[2]}}))})),!0})),console.log(":*")},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function u(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.Command=void 0;var a=function(){function e(t){var n=this;this.execute=function(t){return e.SendCommand(r({command:n.commandName},t))},this.commandName=t}return e.SendCommand=function(e){return o(this,void 0,void 0,(function(){return i(this,(function(t){return[2,new Promise((function(t,n){console.log(e.command+" Request",e),chrome.runtime.sendMessage(e,(function(n){console.log(e.command+" Response",n),t(n)}))}))]}))}))},e.GenerateIdentity=new e("GenerateIdentity"),e.FetchAllIdentityName=new e("FetchAllIdentityName"),e.SendIdentity=new e("SendIdentity"),e.DeleteIdentity=new e("DeleteIdentity"),e}();t.Command=a},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function u(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}c((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.CryptoWrapper=void 0;var i=function(){function e(){var e=this;this._enc=new TextEncoder,this._encodeMessage=function(t){return e._enc.encode(t)}}return e.prototype._str2ab=function(e){for(var t=new ArrayBuffer(e.length),n=new Uint8Array(t),r=0,o=e.length;r<o;r++)n[r]=e.charCodeAt(r);return t},e.prototype._ab2str=function(e){return String.fromCharCode.apply(null,Array.from(new Uint8Array(e)))},e.prototype.generateKeyPair=function(){return r(this,void 0,void 0,(function(){return o(this,(function(e){return[2,window.crypto.subtle.generateKey({name:"RSA-PSS",modulusLength:4096,publicExponent:new Uint8Array([1,0,1]),hash:"SHA-512"},!0,["sign","verify"])]}))}))},e.prototype.importCryptoKey=function(e){var t=e.substring("-----BEGIN PUBLIC KEY-----".length,e.length-"-----END PUBLIC KEY-----".length),n=atob(t),r=this._str2ab(n);return window.crypto.subtle.importKey("spki",r,{name:"RSA-PSS",hash:"SHA-512"},!0,["verify"])},e.prototype.publickeyToArray=function(e){var t=e.substring("-----BEGIN PRIVATE KEY-----".length,e.length-"-----END PRIVATE KEY-----".length),n=atob(t);return this._str2ab(n)},e.prototype.importCryptoPrivateKey=function(e){var t=e.substring("-----BEGIN PRIVATE KEY-----".length,e.length-"-----END PRIVATE KEY-----".length),n=atob(t),r=this._str2ab(n);return window.crypto.subtle.importKey("pkcs8",r,{name:"RSA-PSS",hash:"SHA-512"},!0,["sign"])},e.prototype.exportCryptoKey=function(e){return r(this,void 0,void 0,(function(){var t,n;return o(this,(function(r){switch(r.label){case 0:return[4,window.crypto.subtle.exportKey("spki",e)];case 1:return t=r.sent(),n=this._ab2str(t),[2,"-----BEGIN PUBLIC KEY-----\n"+btoa(n)+"\n-----END PUBLIC KEY-----"]}}))}))},e.prototype.exportPrivateCryptoKey=function(e){return r(this,void 0,void 0,(function(){var t,n;return o(this,(function(r){switch(r.label){case 0:return[4,window.crypto.subtle.exportKey("pkcs8",e)];case 1:return t=r.sent(),n=this._ab2str(t),[2,"-----BEGIN PRIVATE KEY-----\n"+window.btoa(n)+"\n-----END PRIVATE KEY-----"]}}))}))},e.prototype.sign=function(e,t){return r(this,void 0,void 0,(function(){var n,r;return o(this,(function(o){switch(o.label){case 0:return[4,window.crypto.subtle.sign({name:"RSA-PSS",saltLength:128},e,this._encodeMessage(t))];case 1:return n=o.sent(),r=this._ab2str(n),[2,window.btoa(r)]}}))}))},e.prototype.verifySignature=function(e,t,n){return r(this,void 0,void 0,(function(){var r,i;return o(this,(function(o){switch(o.label){case 0:return r=atob(t),i=this._str2ab(r),[4,window.crypto.subtle.verify({name:"RSA-PSS",saltLength:128},e,i,this._encodeMessage(n))];case 1:return[2,o.sent()]}}))}))},e.prototype.generateFingerprint=function(e){return r(this,void 0,void 0,(function(){var t,n,r;return o(this,(function(o){switch(o.label){case 0:return[4,crypto.subtle.digest("SHA-256",this._enc.encode(e))];case 1:return t=o.sent(),n=Array.from(new Uint8Array(t)),r=n.map((function(e){return e.toString(16).padStart(2,"0")})).join(""),console.log(r),[2,r]}}))}))},e}();t.CryptoWrapper=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Identity=t.IdentityStore=void 0;var r=function(){this.set=function(e,t){return new Promise((function(n,r){var o={};o[btoa(e)]=t,chrome.storage.sync.set(o,(function(){n({message:"'"+e+"' stored."})}))}))},this.get=function(e){return new Promise((function(t,n){var r=btoa(e);chrome.storage.sync.get(r,(function(e){var n=e[r],i=new o(n);t(i)}))}))},this.remove=function(e){return new Promise((function(t,n){var r=e.map(btoa);chrome.storage.sync.remove(r,(function(){t()}))}))},this.getAll=function(){return new Promise((function(e,t){chrome.storage.sync.get(null,(function(t){e(t||[])}))}))}};t.IdentityStore=r;var o=function(e){Object.assign(this,e)};t.Identity=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,